package test

import (
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
	"tetris/field"
)

func TestCleanOneRow(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanTwoRows(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanThreeRows(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"111111111111"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanFourRows(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"111111111111"+
			"111111111111"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanTwoRows_Separated(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"101000000001"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanThreeRows_Separated(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"101000000001"+
			"111111111111"+
			"100100000001"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"100100000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanFourRows_Separated(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"101000000001"+
			"111111111111"+
			"100100000001"+
			"111111111111"+
			"100000000101"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"100100000001"+
			"100000000101"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanFourRows_Separated_Even(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"111111111111"+
			"100100000001"+
			"111111111111"+
			"100000000101"+
			"111111111111"+
			"100010000001"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"100100000001"+
			"100000000101"+
			"100010000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanThreeRows_Separated_TwoAndOne(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"111111111111"+
			"111111111111"+
			"100000000101"+
			"111111111111"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"100000000101"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanFourRows_Separated_TwoAndTwo(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"111111111111"+
			"111111111111"+
			"100000000101"+
			"111111111111"+
			"111111111111"+
			"100001000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"101000000001"+
			"100000000101"+
			"100001000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanRowNearEnd(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"111111111111", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanTwoSeparatedRowsNearEnd(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"111111111111"+
			"110000000001"+
			"111111111111", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanThreeSeparatedRowsNearEnd_TwoAndOne(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"111111111111"+
			"110000000001"+
			"111111111111"+
			"111111111111", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"100000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}

func TestCleanTwoSeparatedRowsOneTopOneBottom(t *testing.T) {
	fieldVal, _ := big.NewInt(0).SetString(
		"111111111111"+
			"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"111111111111", 2)
	fieldValAfterClean, _ := big.NewInt(0).SetString(
		"111111111111"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"110000000001"+
			"100000000001"+
			"100000000001", 2)
	f := field.Field{Val: fieldVal, CurrentPiece: nil}
	f.Clean()
	assert.Equal(t, fieldValAfterClean, f.Val)
}
